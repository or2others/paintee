<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.paintee.common.repository.mapper.UserSocialMapper" >
  <resultMap id="BaseResultMap" type="com.paintee.common.repository.entity.UserSocial" >
    <id column="user_id" property="userId" jdbcType="VARCHAR" />
    <id column="provider_id" property="providerId" jdbcType="VARCHAR" />
    <id column="provider_user_id" property="providerUserId" jdbcType="VARCHAR" />
    <result column="rank" property="rank" jdbcType="INTEGER" />
    <result column="display_name" property="displayName" jdbcType="VARCHAR" />
    <result column="profile_url" property="profileUrl" jdbcType="VARCHAR" />
    <result column="image_url" property="imageUrl" jdbcType="VARCHAR" />
    <result column="access_token" property="accessToken" jdbcType="VARCHAR" />
    <result column="secret" property="secret" jdbcType="VARCHAR" />
    <result column="refresh_token" property="refreshToken" jdbcType="VARCHAR" />
    <result column="expire_time" property="expireTime" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    user_id, provider_id, provider_user_id, rank, display_name, profile_url, image_url, 
    access_token, secret, refresh_token, expire_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.paintee.common.repository.entity.UserSocialExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from TB_USER_SOCIAL
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.paintee.common.repository.entity.UserSocialKey" >
    select 'true' as QUERYID,
    <include refid="Base_Column_List" />
    from TB_USER_SOCIAL
    where user_id = #{userId,jdbcType=VARCHAR}
      and provider_id = #{providerId,jdbcType=VARCHAR}
      and provider_user_id = #{providerUserId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.paintee.common.repository.entity.UserSocialKey" >
    delete from TB_USER_SOCIAL
    where user_id = #{userId,jdbcType=VARCHAR}
      and provider_id = #{providerId,jdbcType=VARCHAR}
      and provider_user_id = #{providerUserId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.paintee.common.repository.entity.UserSocialExample" >
    delete from TB_USER_SOCIAL
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.paintee.common.repository.entity.UserSocial" >
    insert into TB_USER_SOCIAL (user_id, provider_id, provider_user_id, 
      rank, display_name, profile_url, 
      image_url, access_token, secret, 
      refresh_token, expire_time)
    values (#{userId,jdbcType=VARCHAR}, #{providerId,jdbcType=VARCHAR}, #{providerUserId,jdbcType=VARCHAR}, 
      #{rank,jdbcType=INTEGER}, #{displayName,jdbcType=VARCHAR}, #{profileUrl,jdbcType=VARCHAR}, 
      #{imageUrl,jdbcType=VARCHAR}, #{accessToken,jdbcType=VARCHAR}, #{secret,jdbcType=VARCHAR}, 
      #{refreshToken,jdbcType=VARCHAR}, #{expireTime,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.paintee.common.repository.entity.UserSocial" >
    insert into TB_USER_SOCIAL
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="providerId != null" >
        provider_id,
      </if>
      <if test="providerUserId != null" >
        provider_user_id,
      </if>
      <if test="rank != null" >
        rank,
      </if>
      <if test="displayName != null" >
        display_name,
      </if>
      <if test="profileUrl != null" >
        profile_url,
      </if>
      <if test="imageUrl != null" >
        image_url,
      </if>
      <if test="accessToken != null" >
        access_token,
      </if>
      <if test="secret != null" >
        secret,
      </if>
      <if test="refreshToken != null" >
        refresh_token,
      </if>
      <if test="expireTime != null" >
        expire_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="providerId != null" >
        #{providerId,jdbcType=VARCHAR},
      </if>
      <if test="providerUserId != null" >
        #{providerUserId,jdbcType=VARCHAR},
      </if>
      <if test="rank != null" >
        #{rank,jdbcType=INTEGER},
      </if>
      <if test="displayName != null" >
        #{displayName,jdbcType=VARCHAR},
      </if>
      <if test="profileUrl != null" >
        #{profileUrl,jdbcType=VARCHAR},
      </if>
      <if test="imageUrl != null" >
        #{imageUrl,jdbcType=VARCHAR},
      </if>
      <if test="accessToken != null" >
        #{accessToken,jdbcType=VARCHAR},
      </if>
      <if test="secret != null" >
        #{secret,jdbcType=VARCHAR},
      </if>
      <if test="refreshToken != null" >
        #{refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="expireTime != null" >
        #{expireTime,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.paintee.common.repository.entity.UserSocialExample" resultType="java.lang.Integer" >
    select count(*) from TB_USER_SOCIAL
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update TB_USER_SOCIAL
    <set >
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.providerId != null" >
        provider_id = #{record.providerId,jdbcType=VARCHAR},
      </if>
      <if test="record.providerUserId != null" >
        provider_user_id = #{record.providerUserId,jdbcType=VARCHAR},
      </if>
      <if test="record.rank != null" >
        rank = #{record.rank,jdbcType=INTEGER},
      </if>
      <if test="record.displayName != null" >
        display_name = #{record.displayName,jdbcType=VARCHAR},
      </if>
      <if test="record.profileUrl != null" >
        profile_url = #{record.profileUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.imageUrl != null" >
        image_url = #{record.imageUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.accessToken != null" >
        access_token = #{record.accessToken,jdbcType=VARCHAR},
      </if>
      <if test="record.secret != null" >
        secret = #{record.secret,jdbcType=VARCHAR},
      </if>
      <if test="record.refreshToken != null" >
        refresh_token = #{record.refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="record.expireTime != null" >
        expire_time = #{record.expireTime,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update TB_USER_SOCIAL
    set user_id = #{record.userId,jdbcType=VARCHAR},
      provider_id = #{record.providerId,jdbcType=VARCHAR},
      provider_user_id = #{record.providerUserId,jdbcType=VARCHAR},
      rank = #{record.rank,jdbcType=INTEGER},
      display_name = #{record.displayName,jdbcType=VARCHAR},
      profile_url = #{record.profileUrl,jdbcType=VARCHAR},
      image_url = #{record.imageUrl,jdbcType=VARCHAR},
      access_token = #{record.accessToken,jdbcType=VARCHAR},
      secret = #{record.secret,jdbcType=VARCHAR},
      refresh_token = #{record.refreshToken,jdbcType=VARCHAR},
      expire_time = #{record.expireTime,jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.paintee.common.repository.entity.UserSocial" >
    update TB_USER_SOCIAL
    <set >
      <if test="rank != null" >
        rank = #{rank,jdbcType=INTEGER},
      </if>
      <if test="displayName != null" >
        display_name = #{displayName,jdbcType=VARCHAR},
      </if>
      <if test="profileUrl != null" >
        profile_url = #{profileUrl,jdbcType=VARCHAR},
      </if>
      <if test="imageUrl != null" >
        image_url = #{imageUrl,jdbcType=VARCHAR},
      </if>
      <if test="accessToken != null" >
        access_token = #{accessToken,jdbcType=VARCHAR},
      </if>
      <if test="secret != null" >
        secret = #{secret,jdbcType=VARCHAR},
      </if>
      <if test="refreshToken != null" >
        refresh_token = #{refreshToken,jdbcType=VARCHAR},
      </if>
      <if test="expireTime != null" >
        expire_time = #{expireTime,jdbcType=BIGINT},
      </if>
    </set>
    where user_id = #{userId,jdbcType=VARCHAR}
      and provider_id = #{providerId,jdbcType=VARCHAR}
      and provider_user_id = #{providerUserId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.paintee.common.repository.entity.UserSocial" >
    update TB_USER_SOCIAL
    set rank = #{rank,jdbcType=INTEGER},
      display_name = #{displayName,jdbcType=VARCHAR},
      profile_url = #{profileUrl,jdbcType=VARCHAR},
      image_url = #{imageUrl,jdbcType=VARCHAR},
      access_token = #{accessToken,jdbcType=VARCHAR},
      secret = #{secret,jdbcType=VARCHAR},
      refresh_token = #{refreshToken,jdbcType=VARCHAR},
      expire_time = #{expireTime,jdbcType=BIGINT}
    where user_id = #{userId,jdbcType=VARCHAR}
      and provider_id = #{providerId,jdbcType=VARCHAR}
      and provider_user_id = #{providerUserId,jdbcType=VARCHAR}
  </update>
</mapper>